import static org.gradle.api.tasks.wrapper.Wrapper.DistributionType

buildscript {
    ext {
        artifactoryContextUrl = "https://artifactory.corp.alleninstitute.org/artifactory"
    }
    repositories {
        mavenLocal()
        maven {
            url "${artifactoryContextUrl}/maven-virtual"
        }
        mavenCentral()
    }
    dependencies {
        classpath("org.alleninstitute.aics:gradle-plugins:1.0.23")
    }
}

plugins {
    id "com.dorongold.task-tree" version "1.3.1"
    id "com.moowork.node" version "1.2.0"
}

apply plugin: "org.alleninstitute.git-info"

node {
    version = "10.15.3"
    npmVersion = "6.9.0"
    download = true
    nodeModulesDir = file("${project.projectDir}")
}

project.version = "0.1.x"
project.group = "org.alleninstitute.aics"

ext {
    // Repo settings
    artifactoryBaseUrl = "https://artifactory.corp.alleninstitute.org/artifactory"

    artifactVersion = gitInfo.branch != "master" ? "${gitInfo.branch.tokenize("/").join("-")}" : project.version
}

wrapper {
    gradleVersion "5.2"
    setDistributionType(DistributionType.BIN)
}

task lint(type: YarnTask) {
    FileTree tsFiles = fileTree(dir: "src", includes: ["**/*.ts", "**/*.tsx"])
    args = ["tslint", "-c", "tslint.json"] + tsFiles.asList()
}

task test(type: YarnTask) {
    environment = [TS_NODE_PROJECT: "tsconfig.commonjs.json", NODE_ENV: "production"]
    args = ["mocha", "--opts", "mocha.opts", "src/**/test/*.{ts,tsx}"]
}

task dev(type: YarnTask) {
    environment = [NODE_ENV: "development"]
    args = ["electron-webpack", "dev"]
}

task devStg(type: YarnTask) {
    environment = [
            NODE_ENV: "development",
            LIMS_HOST: "stg-aics.corp.alleninstitute.org",
            LIMS_PORT: "80",
    ]
    args = ["electron-webpack", "dev"]
}

///////////////////////////
// Build and publish
//////////////////////////
task artifactClean(type: Delete) {
    delete "$projectDir/dist"
}


task compile(type: YarnTask) {
    args = ["electron-webpack"]
}

def createBundleTask(nodeEnv, host, port, taskPrefix) {
    def username = System.properties['user.name']
    def uid = ["id", "-u", username].execute().text.trim()
    def gid = ["id", "-g", username].execute().text.trim()
    def args = [
            "docker", "run", "--rm",
            "--env", "LIMS_PROTOCOL=http",
            "--env", "LIMS_HOST=$host",
            "--env", "LIMS_PORT=$port",
            "--env", "NODE_ENV=$nodeEnv",
            "--env", "USER=${username}",
            "--env", "UID=${uid}",
            "--env", "GID=${gid}",
            "-v", "${projectDir}:/project",
            "-v", "${projectDir}/node_modules:/project/node_modules",
            "docker-virtual.artifactory.corp.alleninstitute.org/electron-builder:1.0.0-1.1.0",
            "/bin/bash", "-c", "yarn dist-all"
    ]

    return tasks.create("${taskPrefix}Bundle", Exec) {
        dependsOn compile
        commandLine args
    }
}

createBundleTask("development", "localhost", "8080", "dev")
createBundleTask("production", "stg-aics.corp.alleninstitute.org", "80", "stage")
createBundleTask("production", "aics.corp.alleninstitute.org", "80", "prod")
