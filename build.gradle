import static org.gradle.api.tasks.wrapper.Wrapper.DistributionType

buildscript {
    ext {
        artifactoryContextUrl = "https://artifactory.corp.alleninstitute.org/artifactory"
    }
    repositories {
        mavenLocal()
        maven {
            url "${artifactoryContextUrl}/maven-virtual"
        }
        mavenCentral()
    }
    dependencies {
        classpath("org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1")
        classpath("org.alleninstitute.aics:gradle-plugins:1.0.23")
    }
}

plugins {
    id "com.dorongold.task-tree" version "1.3.1"
    id "com.moowork.node" version "1.2.0"
}

apply plugin: "maven-publish"
apply plugin: "maven-publish-auth"
apply plugin: "org.alleninstitute.git-info"

node {
    version = "10.15.3"
    npmVersion = "6.9.0"
    download = true
    nodeModulesDir = file("${project.projectDir}")
}

project.version = "0.1.x"
project.group = "org.alleninstitute.aics"

ext {
    // Repo settings
    artifactoryBaseUrl = "https://artifactory.corp.alleninstitute.org/artifactory"

    // TGZ Publishing
    linuxArtifact = "file-upload-app 1.0.0.AppImage"
    windowsArtifact = "file-upload-app Setup 1.0.0.exe"

    artifactVersion = gitInfo.branch != "master" ? "${gitInfo.branch.tokenize("/").join("-")}" : project.version
}

wrapper {
    gradleVersion "5.2"
    setDistributionType(DistributionType.BIN)
}

task lint(type: YarnTask) {
    FileTree tsFiles = fileTree(dir: "src", includes: ["**/*.ts", "**/*.tsx"])
    args = ["tslint", "-c", "tslint.json"] + tsFiles.asList()
}

task test(type: YarnTask) {
    environment = [TS_NODE_PROJECT: "tsconfig.commonjs.json", NODE_ENV: "production"]
    args = ["mocha", "--opts", "mocha.opts", "src/**/test/*.{ts,tsx}"]
}

task dev(type: YarnTask) {
    environment = [NODE_ENV: "development"]
    args = ["electron-webpack", "dev"]
}

///////////////////////////
// Build and publish
//////////////////////////

task compile(type: YarnTask) {
    args = ["electron-webpack"]
}

task bundle {
    println env
    dependsOn yarn

    def env = env.toLowerCase() ?: "production"
    def host = "aics.corp.alleninstitute.org"
    def port = "80"

    if (env == "development" || env == "dev") {
        host = "localhost"
        port = "8080"
        env = "development"
    } else if (env == "staging" || env == "stage") {
        host = "stg-aics.corp.alleninstitute.org"
        env = "production" // this is used to set NODE_ENV and we want our environment
        // to be as close to production as possible without modifying production data
    }

    def args = [
            "docker", "run", "--rm",
            "--env", "ELECTRON_CACHE=/root/.cache/electron",
            "--env", "ELECTRON_BUILDER_CACHE=/root/.cache/electron-builder",
            "--env", "LIMS_PROTOCOL=http",
            "--env", "LIMS_HOST=$host",
            "--env", "LIMS_PORT=$port",
            "--env", "NODE_ENV=$env",
            "-v", "${projectDir}:/project",
            "-v", "${projectDir}/node_modules:/project/node_modules",
            "electronuserland/builder:wine",
            "/bin/bash", "-c", "yarn dist-all"
    ]

    exec {
        commandLine args
    }
}

/// Publishing

task copyLinuxArtifact(type:Copy) {
    dependsOn bundle
    from "$projectDir/dist/$linuxArtifact"
    into projectDir
}

task copyWindowsArtifact(type:Copy) {
    dependsOn bundle
    from "$projectDir/dist/$windowsArtifact"
    into projectDir
}

task artifactClean(type: Delete) {
    delete "$projectDir/$linuxArtifact", "$projectDir/$windowsArtifact"
}

task localPublish {
    description "Create development module and publish to local cache"
    group "AICS Publishing"
    dependsOn copyLinuxArtifact, copyWindowsArtifact, "publishMvnModulePublicationToMavenLocal"
}

task snapshotPublish {
    description "Create production module and publish to snapshot repo in artifactory"
    group "AICS Publishing"
    dependsOn copyLinuxArtifact, copyWindowsArtifact, "publishMvnModulePublicationToSnapshotsRepoRepository"
}

publishing {
    publications {
        mvnModule(MavenPublication) {
            artifact(linuxArtifact) {
                classifier "file-upload-app 1.0.0"
                extension "AppImage"
                version artifactVersion
            }
            artifact(windowsArtifact) {
                classifier "file-upload-app Setup 1.0.0"
                extension "exe"
                version artifactVersion
            }
        }
    }

    repositories {
        maven {
            name = "snapshotsRepo"
            url "${artifactoryBaseUrl}/maven-snapshot-local"
        }
    }
}
